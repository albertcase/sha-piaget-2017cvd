"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

;(function () {

    // function isWeiXin(){
    //     var ua = window.navigator.userAgent.toLowerCase();
    //     if(ua.match(/MicroMessenger/i) == 'micromessenger'){
    //         return true;
    //     }else{
    //         return false;
    //     }
    // }

    // var browser={  
    //     versions:function(){   
    //            var u = navigator.userAgent, app = navigator.appVersion;   
    //            return {//移动终端浏览器版本信息   
    //                 trident: u.indexOf('Trident') > -1, //IE内核  
    //                 presto: u.indexOf('Presto') > -1, //opera内核  
    //                 webKit: u.indexOf('AppleWebKit') > -1, //苹果、谷歌内核  
    //                 gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1, //火狐内核  
    //                 mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端  
    //                 ios: !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端  
    //                 android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1, //android终端或者uc浏览器  
    //                 iPhone: u.indexOf('iPhone') > -1 , //是否为iPhone或者QQHD浏览器  
    //                 iPad: u.indexOf('iPad') > -1, //是否iPad    
    //                 webApp: u.indexOf('Safari') == -1 //是否web应该程序，没有头部与底部  
    //             };  
    //          }(),  
    //          language:(navigator.browserLanguage || navigator.language).toLowerCase()  
    // }   

    // if(!isWeiXin()){
    //     location.href = "/compatible.html"
    // }   


    var shareSet = {
        "_title": '因为你，所以爱', //分享标题
        "_desc": "大胆向TA告白，为TA获取来自伯爵的惊喜", // 分享朋友圈的描述
        "_desc_friend": "七夕告白不要怂，要从心", // 分享好友的描述
        "_link": window.location.origin, //分享的连接
        "_imgUrl": window.location.origin + "/build/dist/img/share.jpg", //分享的图片
        "_shareAppMessageCallback": function _shareAppMessageCallback() {
            _hmt.push(['_trackEvent', 'buttons', 'share', 'onMenuShareAppMessage']);
        },
        "_shareTimelineCallback": function _shareTimelineCallback() {
            _hmt.push(['_trackEvent', 'buttons', 'share', 'onMenuShareTimeline']);
        }
        //"_url": encodeURIComponent(window.location.href)//encodeURIComponent(window.location.href.split("#")[0]) //.replace('http%3A%2F%2F','')
    };

    var _base = function () {
        function _base() {
            _classCallCheck(this, _base);
        }

        _createClass(_base, [{
            key: "baseInit",
            value: function baseInit() {
                this.wxshareFun(shareSet);
            }
        }, {
            key: "sectionChange",
            value: function sectionChange(n) {
                // section 页面切换
                var sectionItems = document.querySelectorAll(".section");

                for (var i = 0; i < sectionItems.length; i++) {
                    var sectionItem = sectionItems[i];
                    sectionItem.className = 'section';
                }
                // sectionItems.forEach(function(sectionItem){
                //     sectionItem.className = 'section';
                // })

                document.getElementById(n).className = "section show";

                if (n == 'index') {
                    document.getElementById('dreambox').className = n;
                } else {
                    document.getElementById('dreambox').className = n + ' inside';
                }
                this.overscroll(document.getElementById(n));

                if (n == 'works') {
                    var dreambox = document.getElementById('dreambox');
                    dreambox.className = n + ' hide-head';
                }

                // 下面是搭建框架的遗留问题，下次谨记。
                // form page 
                var formFoot = document.querySelector('.formFoot');
                if (formFoot) {
                    if (n == 'form') {
                        formFoot.className = 'formFoot foot';
                    } else {
                        formFoot.className = 'formFoot foot transition hidden';
                    }
                }

                // allStoreFoot
                // var allStoreFoot = document.querySelector('.allStoreFoot');
                // if(allStoreFoot){
                //    if(n == 'all-store'){
                //         allStoreFoot.className = 'allStoreFoot foot';
                //     }else{
                //         allStoreFoot.className = 'allStoreFoot foot transition hidden';
                //     } 
                // } 
            }
        }, {
            key: "formErrorTips",
            value: function formErrorTips(alertNodeContext) {
                var alertInt,
                    alertEvent = document.querySelectorAll('.alertNode');
                clearTimeout(alertInt);
                if (alertEvent.length > 0) {
                    alertEvent.innerHTML = alertNodeContext;
                } else {
                    var alertNode = document.createElement("div");
                    alertNode.setAttribute("class", "alertNode");
                    alertNode.innerHTML = alertNodeContext;
                    document.body.appendChild(alertNode);
                }
                alertInt = setTimeout(function () {
                    alertEvent = document.querySelector('.alertNode');
                    alertEvent.remove();
                }, 1600);
            }
        }, {
            key: "ajaxFun",
            value: function ajaxFun(method, url, data, callback) {
                var xhr = void 0;
                if (window.XMLHttpRequest) {
                    xhr = new XMLHttpRequest();
                } else {
                    xhr = new ActiveXObject("Microsoft.XMLHttp");
                }

                xhr.open(method, url, true);
                xhr.onreadystatechange = function () {
                    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                        var _data = xhr.responseText; // JSON.parse(xhr.responseText);
                        callback(eval("(" + _data + ")"));
                    }
                };

                xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
                // console.log(data);
                // console.log(JSON.stringify(data));
                xhr.send(data);
            }
        }, {
            key: "loadFn",
            value: function loadFn(arr, fn, fn2) {
                var loader = new PxLoader();
                for (var i = 0; i < arr.length; i++) {
                    loader.addImage(arr[i]);
                };

                loader.addProgressListener(function (e) {
                    var percent = Math.round(e.completedCount / e.totalCount * 100);
                    if (fn2) fn2(percent);
                });

                loader.addCompletionListener(function () {
                    if (fn) fn();
                });
                loader.start();
            }
        }, {
            key: "loadingFnDoing",
            value: function loadingFnDoing(allAmg, loadCallback) {
                this.loadFn(allAmg, function () {
                    var _pageImgs = document.querySelectorAll('img');
                    for (var i = 0; i < _pageImgs.length; i++) {
                        var pageImgNode = _pageImgs[i],
                            pageImgNodeSourcesrc = pageImgNode.getAttribute('sourcesrc');

                        if (pageImgNodeSourcesrc) {
                            pageImgNode.src = pageImgNodeSourcesrc;
                        }
                    }
                }, function (p) {
                    if (p >= 100) {
                        loadCallback();
                        console.log('loading finsh!');
                    } else {
                        // console.log(p); 
                    }
                });
            }
        }, {
            key: "overscroll",
            value: function overscroll(el) {
                el.addEventListener('touchstart', function () {
                    var top = el.scrollTop,
                        totalScroll = el.scrollHeight,
                        currentScroll = top + el.offsetHeight;
                    //If we're at the top or the bottom of the containers
                    //scroll, push up or down one pixel.
                    //
                    //this prevents the scroll from "passing through" to
                    //the body.
                    if (top === 0) {
                        el.scrollTop = 1;
                    } else if (currentScroll === totalScroll) {
                        el.scrollTop = top - 1;
                    }
                });
                el.addEventListener('touchmove', function (evt) {
                    //if the content is actually scrollable, i.e. the content is long enough
                    //that scrolling can occur
                    if (el.offsetHeight < el.scrollHeight) evt._isScroller = true;
                });
            }
        }, {
            key: "wxshareFun",
            value: function wxshareFun(obj) {
                //wx.config({"debug": true}); 
                wx.ready(function () {

                    /* ----------- 禁用分享 开始 ----------- */
                    // wx.hideMenuItems({
                    //   menuList: [
                    //     //'menuItem:share:appMessage', // 分享到朋友
                    //     //'menuItem:share:timeline', // 分享到朋友圈
                    //     //'menuItem:copyUrl' // 复制链接
                    //   ],
                    //   success: function (res) {
                    //     // alert('已隐藏“阅读模式”，“分享到朋友圈”，“复制链接”等按钮');
                    //   },
                    //   fail: function (res) {
                    //       //alert(JSON.stringify(res));
                    //   }
                    // });
                    /* ----------- 禁用分享 结束 ----------- */

                    // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。
                    wx.onMenuShareAppMessage({
                        title: obj._title,
                        desc: obj._desc,
                        link: obj._link,
                        imgUrl: obj._imgUrl,
                        type: '',
                        dataUrl: '',
                        success: function success() {
                            obj._shareAppMessageCallback();
                        },
                        cancel: function cancel() {}
                    });
                    wx.onMenuShareTimeline({
                        title: obj._desc_friend,
                        link: obj._link,
                        imgUrl: obj._imgUrl,
                        success: function success() {
                            obj._shareTimelineCallback();
                        },
                        cancel: function cancel() {}
                    });
                });
            }
        }, {
            key: "getCookie",
            value: function getCookie(name) {
                var arr,
                    reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
                if (arr = document.cookie.match(reg)) return unescape(arr[2]);else return null;
            }
        }, {
            key: "delCookie",
            value: function delCookie(name) {
                var exp = new Date();
                exp.setTime(exp.getTime() - 1);
                var cval = this.getCookie(name);
                if (cval != null) document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
            }
        }, {
            key: "setCookie",
            value: function setCookie(name, value, time) {
                var d = new Date();
                d.setTime(d.getTime() + time * 24 * 60 * 60 * 1000);
                var expires = "expires=" + d.toUTCString();
                document.cookie = name + "=" + value + "; " + expires;
            }
        }, {
            key: "getQueryString",
            value: function getQueryString(name) {
                var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
                var r = window.location.search.substr(1).match(reg);
                if (r != null) return unescape(r[2]);return null;
            }
        }, {
            key: "hasClass",
            value: function hasClass(el) {
                var regex = new RegExp('(^|\\s)' + className + '(\\s|$)', 'g');
                return regex.test(el.className);
                el.className = el.className.replace(regex, '');
                return true;
            }
        }, {
            key: "addClass",
            value: function addClass(el) {
                if (this.hasClass(el)) return false;
                el.className += ' ' + className;
                return true;
            }
        }, {
            key: "removeClass",
            value: function removeClass(el) {
                if (this.hasClass(el)) {
                    var regex = new RegExp('(^|\\s)' + className + '(\\s|$)', 'g');
                    el.className = el.className.replace(regex, '');
                    return true;
                }
                return false;
            }
            // 视频事件监测

        }, {
            key: "eventTester",
            value: function eventTester(m, e, c) {
                // 视频事件监测函数
                /*
                 * eventTester("play");              // play()和autoplay开始播放时触发
                 * eventTester("pause");             // pause() 暂停触发
                 * eventTester("timeupdate");        // 播放时间改变
                 * eventTester("ended");             // 播放结束
                 */
                m.addEventListener(e, function () {
                    c();
                }, false);
            }
        }, {
            key: "isPhoneNum",
            value: function isPhoneNum(v) {
                //return /^0|^((\+?86 )|(\(\+86 \)))?(13[0-9]|15[012356789]|18[012356789]|14[57])[0-9]{8}$/.test(v);
                return (/^1([0-9]){10}$/.test(v)
                );
            }
        }, {
            key: "isEmail",
            value: function isEmail(v) {
                //return /^0|^((\+?86 )|(\(\+86 \)))?(13[0-9]|15[012356789]|18[012356789]|14[57])[0-9]{8}$/.test(v);
                return (/^(\w-*\.*)+@(\w-?)+(\.\w{2,})+$/.test(v)
                );
            }
        }, {
            key: "elFadeOut",
            value: function elFadeOut(el, callback) {
                var start = Date.now(),
                    dur = 600;
                function update() {
                    var p = ((Date.now() - start) / dur).toFixed(1);
                    if (p < 1) {
                        el.style.opacity = (1 - p).toFixed(1);
                        requestAnimationFrame(update);
                    } else {
                        callback();
                    }
                }

                requestAnimationFrame(update);
            }
        }], [{
            key: "test",
            value: function test() {
                console.log('static');
            }
        }]);

        return _base;
    }();

    window.__base = new _base();
})();

document.addEventListener('touchmove', function (evt) {
    //In this case, the default behavior is scrolling the body, which
    //would result in an overflow.  Since we don't want that, we preventDefault.
    if (!evt._isScroller) {
        evt.preventDefault();
    }
});